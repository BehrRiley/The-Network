tag:
  type: command
  name: tag
  debug: false
  tab complete:
    - define UnevenLCarrots <context.raw_args.split[].count[<&lt>].is[MORE].than[<context.raw_args.split[].count[<&gt>]>]>
    - define UnevenLBrackets <context.raw_args.split[].count[<&lb>].is[MORE].than[<context.raw_args.split[].count[<&rb>]>]>
    - if <[UnevenLCarrots]> && <[UnevenLBrackets].not>:
      - determine "<&8><context.raw_args> <&4><element[<&gt>].pad_right[<context.raw_args.split[].count[<&lt>].sub[<context.raw_args.split[].count[<&gt>]>]>].with[<&gt>]>"
    - else if <[UnevenLCarrots]> && <[UnevenLBrackets]>:
      - determine "<&8><context.raw_args> <&4><element[<&rb>].pad_right[<context.raw_args.split[].count[<&lb>].sub[<context.raw_args.split[].count[<&rb>]>]>].with[<&rb>]><element[<&gt>].pad_right[<context.raw_args.split[].count[<&lt>].sub[<context.raw_args.split[].count[<&gt>]>]>].with[<&gt>]>"
    - else if !<[UnevenLCarrots]> && <[UnevenLBrackets]>:
      - determine "<&4>!Missing Bracket?"
    - define UnevenRCarrots <context.raw_args.split[].count[<&lt>].is[LESS].than[<context.raw_args.split[].count[<&gt>]>]>
    - define UnevenRBrackets <context.raw_args.split[].count[<&lb>].is[LESS].than[<context.raw_args.split[].count[<&rb>]>]>
    - if <[UnevenRCarrots]> && <[UnevenRBrackets].not>:
      - determine "<&4>!Missing Left Tag Mark?"
    - if <[UnevenRCarrots]> && <[UnevenRBrackets]>:
      - determine "<&4>!Missing Left Tag Mark/Left Bracket?"
  script:
    - if <player.flag[behrry.essentials.rank]> > 2:
      - narrate "<proc[colorize].context[Nothing interesting happens.|yellow]>"
      - stop
    - define MessageA "<&2>T<&a>ags<&2>: <proc[Colorize].context[<context.raw_args>|blue]>"
    - define ClipboardA "<context.raw_args>"
    - define HoverA "<proc[Colorize].context[Click to Clip:|green]><&nl><proc[Colorize].context[<context.raw_args>|yellow]>"

    - define MessageB "<&f><context.raw_args.parsed.as_element.replace[<&pipe>].with[&pipe]>"
    - define ClipboardB "<context.raw_args.parsed.as_element.replace[<&pipe>].with[&pipe]>"
    - define HoverB "<proc[Colorize].context[Click to Clip:|green]><&nl><proc[Colorize].context[<context.raw_args.parsed.as_element.replace[<&pipe>].with[&pipe]>|yellow]>"

    - if <context.raw_args.parsed.type> == list:
      - define result <context.raw_args.parsed>
    - else:
      - define result <proc[MsgSuggest].context[<def[MessageB]>|<def[ClipboardB]>|<def[HoverB]>]>

    - narrate <proc[MsgSuggest].context[<def[MessageA]>|<def[ClipboardA]>|<def[HoverA]>]><&nl><[Result]>

    